{"version":3,"sources":["assets/textures/original.png","logo.svg","components/header/threejs/SceneSubject.js","components/header/threejs/GeneralLights.js","components/header/threejs/SceneManager.js","components/header/Header.js","components/header/threejs/threeEntryPoint.js","App.js","components/NavigationBar.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SceneSubject","scene","THREE","load","gltf","add","undefined","error","console","group","subjectGeometry","geometry","i","vertices","length","scalar","Math","random","multiplyScalar","deformGeometry","subjectMaterial","color","transparent","side","alphaTest","alphaMap","alphaTexture","magFilter","wrapT","repeat","y","subjectMesh","subjectWireframe","rotation","z","PI","speed","textureOffsetSpeed","update","time","angle","offset","material","setHSL","sin","scale","set","GeneralLights","lightIn","lightOut","position","rad","x","SceneManager","canvas","clock","origin","screenDimensions","width","height","mousePosition","background","buildScene","renderer","_ref","antialias","alpha","DPR","window","devicePixelRatio","setPixelRatio","setSize","gammaInput","gammaOutput","buildRender","camera","_ref2","aspectRatio","buildCamera","sceneSubjects","createSceneSubjects","elapsedTime","getElapsedTime","lookAt","render","onWindowResize","aspect","updateProjectionMatrix","onMouseMove","Header","container","canvasHalfWidth","canvasHalfHeight","document","createElement","appendChild","createCanvas","sceneManager","resizeCanvas","style","offsetWidth","offsetHeight","round","mouseMove","screenX","screenY","onresize","onmousemove","requestAnimationFrame","threeEntryPoint","this","threeRootElement","_this","react_default","a","className","ref","element","Component","App","Header_Header","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sHCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mRCGzBC,EAAA,SAAAC,IAEE,IAAIC,KAEVC,KAAM,oBAAqB,SAAWC,GAEzCH,EAAMI,IAAKD,EAAKH,aAEjBK,EAAW,SAAWC,GAErBC,QAAQD,MAAOA,KAInB,IAAME,EAAQ,IAAIP,IAEZQ,EAwBN,SAAwBC,GACpB,IAAK,IAAIC,EAAE,EAAGA,EAAED,EAASE,SAASC,OAAQF,GAAG,EAAG,CAC5C,IAAMG,EAAS,EAAkB,GAAdC,KAAKC,SACxBN,EAASE,SAASD,GAAGM,eAAeH,GAGxC,OAAOJ,EA9BaQ,CAAe,IAAIjB,IAA0B,GAAI,IAEnEkB,EAAkB,IAAIlB,IAA2B,CAAEmB,MAAO,OAAQC,aAAa,EAAMC,KAAMrB,IAAkBsB,UAAW,KAC9HJ,EAAgBK,UAAW,IAAIvB,KAAsBC,KAAKuB,KAC1DN,EAAgBK,SAASE,UAAYzB,IACrCkB,EAAgBK,SAASG,MAAQ1B,IACjCkB,EAAgBK,SAASI,OAAOC,EAAI,EAEpC,IAAMC,EAAc,IAAI7B,IAAWQ,EAAiBU,GAE9CY,EAAmB,IAAI9B,IACzB,IAAIA,IAAoBQ,GACxB,IAAIR,KAGRO,EAAMJ,IAAI0B,GACVtB,EAAMJ,IAAI2B,GACV/B,EAAMI,IAAII,GAEVA,EAAMwB,SAASC,EAAIlB,KAAKmB,GAAG,EAE3B,IAAMC,EAAQ,IACRC,EAAqB,IAwB3B,MAAO,CACHC,OAdJ,SAAgBC,GACZ,IAAMC,EAAQD,EAAKH,EAEnB3B,EAAMwB,SAASH,EAAIU,EAEnBpB,EAAgBK,SAASgB,OAAOX,EAAI,IAAOS,EAAOF,EAElDL,EAAiBU,SAASrB,MAAMsB,OAAQ3B,KAAK4B,IAAU,EAANJ,GAAU,GAAK,IAEhE,IAAMK,GAAS7B,KAAK4B,IAAU,EAANJ,GAAS,KAAK,EACtCR,EAAiBa,MAAMC,IAAID,EAAOA,EAAOA,MC5DlCE,EAAA,SAAA9C,GAEX,IAAM+C,EAAU,IAAI9C,IAAiB,UAAW,IAC1C+C,EAAW,IAAI/C,IAAiB,UAAW,IACjD+C,EAASC,SAASJ,IAAI,GAAG,GAAG,IAE5B7C,EAAMI,IAAI2C,GACV/C,EAAMI,IAAI4C,GAEV,IAAME,EAAM,GAOZ,MAAO,CACHb,OANJ,SAAgBC,GACZ,IAAMa,EAAID,EAAMnC,KAAK4B,IAAS,GAALL,GACzBU,EAASC,SAASpB,EAAIsB,KCXfC,EAAA,SAAAC,GAEX,IAAMC,EAAQ,IAAIrD,IACZsD,EAAS,IAAItD,IAAc,EAAE,EAAE,GAE/BuD,EAAmB,CACrBC,MAAOJ,EAAOI,MACdC,OAAQL,EAAOK,QAGbC,EAAgB,CAClBR,EAAG,EACHtB,EAAG,GAGD7B,EAKN,WACI,IAAMA,EAAQ,IAAIC,IAGlB,OAFAD,EAAM4D,WAAa,IAAI3D,IAAY,QAE5BD,EATG6D,GACRC,EAWN,SAAAC,GAAwC,IAAjBN,EAAiBM,EAAjBN,MAAOC,EAAUK,EAAVL,OACpBI,EAAW,IAAI7D,IAAoB,CAAEoD,OAAQA,EAAQW,WAAW,EAAMC,OAAO,IAC7EC,EAAMC,OAAOC,iBAAmBD,OAAOC,iBAAmB,EAOhE,OANAN,EAASO,cAAcH,GACvBJ,EAASQ,QAAQb,EAAOC,GAExBI,EAASS,YAAa,EACtBT,EAASU,aAAc,EAEhBV,EApBMW,CAAYjB,GACvBkB,EAsBN,SAAAC,GAAwC,IAAjBlB,EAAiBkB,EAAjBlB,MAAOC,EAAUiB,EAAVjB,OACpBkB,EAAcnB,EAAQC,EAItBgB,EAAS,IAAIzE,IAHC,GAGoC2E,EAFtC,EACD,KAKjB,OAFAF,EAAOzB,SAAShB,EAAI,GAEbyC,EA/BIG,CAAYrB,GACrBsB,EAiCN,SAA6B9E,GAMzB,MALsB,CAClB,IAAI8C,EAAc9C,GAClB,IAAID,EAAaC,IApCH+E,CAAoB/E,GA4E1C,MAAO,CACHqC,OAnCJ,WAGI,IAFA,IAAM2C,EAAc1B,EAAM2B,iBAElBtE,EAAE,EAAGA,EAAEmE,EAAcjE,OAAQF,IACjCmE,EAAcnE,GAAG0B,OAAO2C,GAQ5BN,EAAOzB,SAASE,GAAyD,KAA9B,IAAlBQ,EAAcR,EAAYuB,EAAOzB,SAASE,GACnEuB,EAAOzB,SAASpB,GAAyD,MAA9B,IAAlB8B,EAAc9B,EAAY6C,EAAOzB,SAASpB,GACnE6C,EAAOQ,OAAO3B,GANdO,EAASqB,OAAOnF,EAAO0E,IA4BvBU,eAnBJ,WAA0B,IACd3B,EAAkBJ,EAAlBI,MAAOC,EAAWL,EAAXK,OAEfF,EAAiBC,MAAQA,EACzBD,EAAiBE,OAASA,EAE1BgB,EAAOW,OAAS5B,EAAQC,EACxBgB,EAAOY,yBAEPxB,EAASQ,QAAQb,EAAOC,IAWxB6B,YARJ,SAAqBpC,EAAGtB,GACpB8B,EAAcR,EAAIA,EAClBQ,EAAc9B,EAAIA,KC1FL2D,uMCHN,SAAAC,GACX,IAGIC,EACAC,EAJEtC,EASN,SAAsBuC,EAAUH,GAC5B,IAAMpC,EAASuC,EAASC,cAAc,UAEtC,OADAJ,EAAUK,YAAYzC,GACfA,EAZI0C,CAAaH,SAAUH,GAChCO,EAAe,IAAI5C,EAAaC,GAoBtC,SAAS4C,IACL5C,EAAO6C,MAAMzC,MAAQ,OACrBJ,EAAO6C,MAAMxC,OAAQ,OAErBL,EAAOI,MAASJ,EAAO8C,YACvB9C,EAAOK,OAASL,EAAO+C,aAEvBV,EAAkB3E,KAAKsF,MAAMhD,EAAO8C,YAAY,GAChDR,EAAmB5E,KAAKsF,MAAMhD,EAAO+C,aAAa,GAElDJ,EAAaZ,iBAGjB,SAASkB,EAATvC,GAAuC,IAAnBwC,EAAmBxC,EAAnBwC,QAASC,EAAUzC,EAAVyC,QACzBR,EAAaT,YAAYgB,EAAQb,EAAiBc,EAAQb,GAnB1DxB,OAAOsC,SAAWR,EAClB9B,OAAOuC,YAAcJ,EACrBL,IAoBJ,SAASd,EAAO7C,GACZqE,sBAAsBxB,GACtBa,EAAa3D,SAjCjB8C,GDFIyB,CAAgBC,KAAKC,mDAGf,IAAAC,EAAAF,KACN,OACIG,EAAAC,EAAApB,cAAA,OAAKqB,UAAU,gBAAgBC,IAAK,SAAAC,GAAO,OAAIL,EAAKD,iBAAmBM,YAR/CC,gCE2BrBC,UC3B2CD,6LDKtD,OACEL,EAAAC,EAAApB,cAAA,OAAKqB,UAAU,OAGbF,EAAAC,EAAApB,cAAC0B,EAAD,cANUF,cEEEG,QACW,cAA7BrD,OAAOsD,SAASC,UAEe,UAA7BvD,OAAOsD,SAASC,UAEhBvD,OAAOsD,SAASC,SAASC,MACvB,2DCVNC,IAASzC,OAAO6B,EAAAC,EAAApB,cAACgC,EAAD,MAASjC,SAASkC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a37c6b07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/original.40938a49.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as THREE from 'three'\nimport alphaTexture from '../../../assets/textures/original.png';\n\nexport default scene => {    \n\n    var loader = new THREE.ObjectLoader();\n\n    loader.load( 'path/to/model.glb', function ( gltf ) {\n    \n        scene.add( gltf.scene );\n    \n    }, undefined, function ( error ) {\n    \n        console.error( error );\n    \n    } );\n\n    const group = new THREE.Group();\n\n    const subjectGeometry = deformGeometry(new THREE.IcosahedronGeometry(10, 2));\n    \n    const subjectMaterial = new THREE.MeshStandardMaterial({ color: \"#000\", transparent: true, side: THREE.DoubleSide, alphaTest: 0.5 });\n    subjectMaterial.alphaMap = new THREE.TextureLoader().load(alphaTexture);\n    subjectMaterial.alphaMap.magFilter = THREE.NearestFilter;\n    subjectMaterial.alphaMap.wrapT = THREE.RepeatWrapping;\n    subjectMaterial.alphaMap.repeat.y = 1;\n\n    const subjectMesh = new THREE.Mesh(subjectGeometry, subjectMaterial);\n        \n    const subjectWireframe = new THREE.LineSegments(\n        new THREE.EdgesGeometry(subjectGeometry),\n        new THREE.LineBasicMaterial()\n    );\n\n    group.add(subjectMesh);\n    group.add(subjectWireframe);\n    scene.add(group);\n\n    group.rotation.z = Math.PI/4;\n\n    const speed = 0.02;\n    const textureOffsetSpeed = 0.02;\n\n    function deformGeometry(geometry) {\n        for (let i=0; i<geometry.vertices.length; i+=2) {\n            const scalar = 1 + Math.random()*0.8;\n            geometry.vertices[i].multiplyScalar(scalar)\n        }\n\n        return geometry;\n    }\n\n    function update(time) {\n        const angle = time*speed ;\n\n        group.rotation.y = angle;\n\n        subjectMaterial.alphaMap.offset.y = 0.55 + time * textureOffsetSpeed;\n\n        subjectWireframe.material.color.setHSL( Math.sin(angle*2), 0.5, 0.5 );\n        \n        const scale = (Math.sin(angle*8)+6.4)/5;\n        subjectWireframe.scale.set(scale, scale, scale)\n    }\n\n    return {\n        update\n    }\n}","import * as THREE from 'three'\n\nexport default scene => {    \n\n    const lightIn = new THREE.PointLight(\"#4CAF50\", 30);\n    const lightOut = new THREE.PointLight(\"#2196F3\", 10);\n    lightOut.position.set(40,20,40);\n\n    scene.add(lightIn);\n    scene.add(lightOut);\n\n    const rad = 80;\n\n    function update(time) {\n        const x = rad * Math.sin(time*0.2)\n        lightOut.position.y = x;\n    }\n\n    return {\n        update\n    }\n}","import * as THREE from 'three';\nimport SceneSubject from './SceneSubject';\nimport GeneralLights from './GeneralLights';\n\nexport default canvas => {\n\n    const clock = new THREE.Clock();\n    const origin = new THREE.Vector3(0,0,0);\n\n    const screenDimensions = {\n        width: canvas.width,\n        height: canvas.height\n    }\n\n    const mousePosition = {\n        x: 0,\n        y: 0\n    }\n\n    const scene = buildScene();\n    const renderer = buildRender(screenDimensions);\n    const camera = buildCamera(screenDimensions);\n    const sceneSubjects = createSceneSubjects(scene);\n\n    function buildScene() {\n        const scene = new THREE.Scene();\n        scene.background = new THREE.Color(\"#FFF\");\n\n        return scene;\n    }\n\n    function buildRender({ width, height }) {\n        const renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true, alpha: true }); \n        const DPR = window.devicePixelRatio ? window.devicePixelRatio : 1;\n        renderer.setPixelRatio(DPR);\n        renderer.setSize(width, height);\n\n        renderer.gammaInput = true;\n        renderer.gammaOutput = true; \n\n        return renderer;\n    }\n\n    function buildCamera({ width, height }) {\n        const aspectRatio = width / height;\n        const fieldOfView = 60;\n        const nearPlane = 4;\n        const farPlane = 100; \n        const camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n\n        camera.position.z = 40;\n\n        return camera;\n    }\n\n    function createSceneSubjects(scene) {\n        const sceneSubjects = [\n            new GeneralLights(scene),\n            new SceneSubject(scene)\n        ];\n\n        return sceneSubjects;\n    }\n\n    function update() {\n        const elapsedTime = clock.getElapsedTime();\n\n        for(let i=0; i<sceneSubjects.length; i++)\n            sceneSubjects[i].update(elapsedTime);\n\n        updateCameraPositionRelativeToMouse();\n\n        renderer.render(scene, camera);\n    }\n\n    function updateCameraPositionRelativeToMouse() {\n        camera.position.x += (  (mousePosition.x * 0.01) - camera.position.x ) * 0.01;\n        camera.position.y += ( -(mousePosition.y * 0.01) - camera.position.y ) * 0.01;\n        camera.lookAt(origin);\n    }\n\n    function onWindowResize() {\n        const { width, height } = canvas;\n        \n        screenDimensions.width = width;\n        screenDimensions.height = height;\n\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        \n        renderer.setSize(width, height);\n    }\n\n    function onMouseMove(x, y) {\n        mousePosition.x = x;\n        mousePosition.y = y;\n    }\n\n    return {\n        update,\n        onWindowResize,\n        onMouseMove\n    }\n}","import React, { Component } from 'react';\n\nimport threeEntryPoint from \"./threejs/threeEntryPoint\"\nimport \"./header.css\"\n\nexport default class Header extends Component {\n    \n    componentDidMount() {\n        threeEntryPoint(this.threeRootElement);\n    }\n\n    render () {\n        return (\n            <div className=\"header-header\" ref={element => this.threeRootElement = element} />\n        );\n    }\n}","import SceneManager from './SceneManager';\n\nexport default container => {\n    const canvas = createCanvas(document, container);\n    const sceneManager = new SceneManager(canvas);\n\n    let canvasHalfWidth;\n    let canvasHalfHeight;\n\n    bindEventListeners();\n    render();\n\n    function createCanvas(document, container) {\n        const canvas = document.createElement('canvas');     \n        container.appendChild(canvas);\n        return canvas;\n    }\n\n    function bindEventListeners() {\n        window.onresize = resizeCanvas;\n        window.onmousemove = mouseMove;\n        resizeCanvas();\t\n    }\n\n    function resizeCanvas() {        \n        canvas.style.width = '100%';\n        canvas.style.height= '100%';\n        \n        canvas.width  = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n\n        canvasHalfWidth = Math.round(canvas.offsetWidth/2);\n        canvasHalfHeight = Math.round(canvas.offsetHeight/2);\n\n        sceneManager.onWindowResize()\n    }\n\n    function mouseMove({screenX, screenY}) {\n        sceneManager.onMouseMove(screenX-canvasHalfWidth, screenY-canvasHalfHeight);\n    }\n\n    function render(time) {\n        requestAnimationFrame(render);\n        sceneManager.update();\n    }\n}","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport 'semantic-ui-css/semantic.min.css';\nimport Header from './components/header/Header'\n// import Menu from './components/Menu'\nimport NavigationBar  from './components/NavigationBar'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      {/* <NavigationBar /> */}\n        {/* <Menu /> */}\n        <Header />\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>Abhijeet Malamkar</p>\n          <a\n            className=\"App-link\"\n            href=\"https://github.com/abhimalamkar\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Github\n          </a>\n        </header> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport { Menu, Segment, Input, Header, Container } from \"semantic-ui-react\";\nimport './style/navigation.css'\n\n\nexport default class MenuExampleInvertedSecondary extends Component {\n  state = { activeItem: \"home\" };\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\n\n  render() {\n    const { activeItem } = this.state;\n\n    return (\n        <Menu pointing secondary>\n        <Menu.Menu position='left'>\n            <div className='header'>Abhijeet Malamkar</div>\n        </Menu.Menu>\n        <Menu.Menu position='right'>\n          <Menu.Item\n            name=\"home\"\n            active={activeItem === \"home\"}\n            onClick={this.handleItemClick}\n          />\n          <Menu.Item\n            name=\"portfolio\"\n            active={activeItem === \"portfolio\"}\n            onClick={this.handleItemClick}\n          />\n          <Menu.Item\n            name=\"about me\"\n            active={activeItem === \"about me\"}\n            onClick={this.handleItemClick}\n          />\n          <Menu.Item\n            name=\"contact\"\n            active={activeItem === \"contact\"}\n            onClick={this.handleItemClick}\n          />\n          <Menu.Item >\n            <Input className=\"icon\" icon=\"search\" placeholder=\"Search...\" />\n          </Menu.Item>\n          </Menu.Menu>\n        </Menu>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}